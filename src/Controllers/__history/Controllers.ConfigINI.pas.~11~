unit Controllers.ConfigINI;

interface

Uses
  System.SysUtils, Vcl.Dialogs, System.IniFiles,
  Vcl.Forms, Controllers.Interfaces, Models.Params;

Type

  TConfigINI = class(TInterfacedObject, iConfigINI)

    private
      function PastaDll: Boolean;
      function GravarIni: Boolean;
    public
      Constructor Create;
      Destructor Destroy; Override;
      class function New: iConfigINI;
      function LerIni: Boolean;
  end;

implementation

uses
  System.Classes;

function TConfigINI.LerIni: Boolean;
Var
  IniFile : String;
  Ini     : TiniFile;
Begin
  try
    IniFile := ExtractFilePath(ParamStr(0))+'Config.ini';
    Ini     := TIniFile.Create(IniFile);

    try

      with Ini do
        Begin
          FParent.UserName        := ReadString('BancoDados',     'User_Name',        FParent.UserName);
          FParent.Password        := ReadString('BancoDados',     'Password',         FParent.Password);
          FParent.Database        := ReadString('BancoDados',     'Database',         FParent.Database);;
          FParent.Server          := ReadString('BancoDados',     'Server',           FParent.Server);
          FParent.DllConexao32x   := ReadString('BancoDados',     'CaminhoDll32x',    FParent.DllConexao32x);
          FParent.DllConexao64x   := ReadString('BancoDados',     'CaminhoDll64x',    FParent.DllConexao64x);
          FParent.Port            := ReadInteger('BancoDados',    'Port',             FParent.Port);
        End;

    finally
      Result := true;
      Ini.Free;
    end;
  Except
    Result := false;
  end;
End;

Constructor TConfigINI.Create(Parent: TParamsBD);
begin
  FParent := Parent;
  PastaDll;
  if not FileExists(ExtractFilePath(ParamStr(0))+'Config.ini') then
    GravarIni;

  LerIni;
end;

function TConfigINI.PastaDll:Boolean;
Begin
  Result := true;
  {$IFDEF WIN32}
    if not DirectoryExists(ExtractFilePath(ParamStr(0)) + '\dll32x') then
      Begin
        CreateDir(ExtractFilePath(ParamStr(0)) + '\dll32x');
      End;
  {$ENDIF$}

  {$IFDEF WIN64}
    if not DirectoryExists(ExtractFilePath(ParamStr(0)) + '\dll64x') then
      Begin
        CreateDir(ExtractFilePath(ParamStr(0)) + '\dll64x');
      End;
  {$ENDIF}
End;

destructor TConfigINI.Destroy;
begin

  inherited;
end;

class function TConfigINI.New(Parent: TParamsBD): iConfigINI;
begin
  Result := Self.Create(Parent);
end;

function TConfigINI.GravarIni: Boolean;
Var
  IniFile     : String;
  xStringList : TStringList;
Begin
  IniFile := ExtractFilePath(ParamStr(0))+'Config.ini';
  xStringList := TStringList.Create;
  try
    With xStringList do
      Begin
        Add('[BancoDados]');
        Add('Database='           + FParent.Database);
        Add('User_Name='          + FParent.UserName);
        Add('Password='           + FParent.Password);
        Add('Port='               + FParent.Port.ToString);
        Add('Server='             + FParent.Server);
        Add('CaminhoDll32x='      + FParent.DllConexao32x);
        Add('CaminhoDll64x='      + FParent.DllConexao64x);
      End;
    xStringList.SaveToFile(IniFile);
  finally
    xStringList.Free;
    Result := true;
  end;

End;

end.
