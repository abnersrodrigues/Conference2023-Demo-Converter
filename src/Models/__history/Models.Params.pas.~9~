unit Models.Params;

interface

uses
  System.SysUtils, System.Classes, System.IniFiles, Controllers.ConfigINI;

type
  TDMParams = class(TDataModule)
    procedure DataModuleCreate(Sender: TObject);
  private
    FPort: integer;
    FDllConexao32x: string;
    FDatabase: string;
    FPassword: string;
    FDllConexao64x: string;
    FUserName: string;
    FServer: string;
    FConfig: TConfigINI;

  public
    property Config:        TConfigINI  read FConfig        write FConfig;
    property UserName:      string      read FUserName      write FUserName;
    property Password:      string      read FPassword      write FPassword;
    property Database:      string      read FDatabase      write FDatabase;
    property Server:        string      read FServer        write FServer;
    property DllConexao32x: string      read FDllConexao32x write FDllConexao32x;
    property DllConexao64x: string      read FDllConexao64x write FDllConexao64x;
    property Port:          integer     read FPort          write FPort;

    function SetParamsMSSQL: Boolean;
  end;

var
  DMParams: TDMParams;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

procedure TDMParams.DataModuleCreate(Sender: TObject);
begin
  TConfigINI.New.LerIni;
end;

function TDMParams.SetParamsMSSQL: Boolean;
Begin
  Result := true;
  Try
    with Self.Config do
      Begin
        UserName        := ReadString('MSSQL',     'User_Name',        UserName);
        Password        := ReadString('MSSQL',     'Password',         Password);
        Database        := ReadString('MSSQL',     'Database',         Database);;
        Server          := ReadString('MSSQL',     'Server',           Server);
        DllConexao32x   := ReadString('MSSQL',     'CaminhoDll32x',    DllConexao32x);
        DllConexao64x   := ReadString('MSSQL',     'CaminhoDll64x',    DllConexao64x);
        Port            := ReadInteger('MSSQL',    'Port',             Port);
      End;
  Except
    Result := false;
  End;
End;

end.
